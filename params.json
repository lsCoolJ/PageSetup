{"name":"Xbee S1 Communication","tagline":"","body":"# Xbee S1 Communication\r\n\r\nThis page is to document the process I have gone through using the Xbee S1 wireless communication device.\r\n\r\n## Setup\r\n\r\n### Hardware\r\n\r\nThe first step in this process is to get the hardware needed. You will need two Xbee devices (you may choose whichever ones fit your needs. I will be using two [Series 1 Xbee](http://www.adafruit.com/products/128?gclid=CILU4I7Ag8QCFU1ffgodfXkACQ) Devices), two computers (or a device that has access to a terminal so that we can view serial communication between the Xbees. I will be using a computer and a [Raspberry Pi B+ Model](http://www.adafruit.com/products/998?gclid=CLj2x4vBg8QCFRSPfgodRoMAhw) for this), and for the purpose of this demonstration, you will need to purchase a [Xbee Explorer USB](https://www.sparkfun.com/products/11812) and/or a [Xbee Breakout Module](https://www.sparkfun.com/products/8276). You will also need any jumper cables or connecting wires needed to make this work.\r\n\r\n### Software\r\n\r\nFor this demonstration, you will need to download [XCTU](http://www.digi.com/products/wireless-wired-embedded-solutions/zigbee-rf-modules/xctu) onto one or both computers. You don't actually _need_ to download this, but it makes it way easier when configuring the XBees and I will not be going into how to set up the XBees otherwise.\r\n\r\n### Configuring the Xbees\r\n\r\nPlug one of your XBee S1s into the USB Explorer and connect that to your computer:\r\n![Xbee Explorer Plugged In](lsCoolJ.github.io/Xbee-USB-Explorer.jpg)\r\n\r\nStart XCTU. You should see this screen:\r\n![XCTU Home Page](lsCoolJ.github.io/XCTU-Home-Page.jpg)\r\n\r\nClick on the **Discover Devices** button in the upper left hand corner. This will bring up this window:\r\n![Discover Devices Window](lsCoolJ.github.io/Discover-Devices-Window.jpg)\r\n\r\nMac users will see something similar to what is above where there is one port called “usbserial-XXXXXXXX” while Windows users will see something like “USB Serial Port”. Select one of these and then click the **Next** button. This will bring up a screen similar to this:\r\n![Discover Devices 2](lsCoolJ.github.io/Discover-Devices-2.jpg)\r\n\r\nMake sure you have at least the 9600 baud rate selected as well as 8-bits. These options should be selected by default. Click on **Finish** and, if your XBee is connected correctly, you should see this screen:\r\n![Devices Found](lsCoolJ.github.io/Devices-Found.jpg)\r\n\r\nGo ahead and click on the **Add Selected Devices** button. Now you should click on the new Radio module that was just added. XCTU will read the radio settings now and this can take a few seconds to complete. Now we come to the actual setting up part. \r\n\r\nOn the left window of XCTU you should see the radio configuration tab:\r\n![Radio Configuration Tab](lsCoolJ.github.io/Radio-Configuration-Tab.jpg)\r\n\r\nHere is where you want to set up the channel (CH), Personal Area Network ID (ID), source ID (MY) and destination ID (DL). To figure out addresses for your two XBees, fill out the following with numbers in the specified range:\r\nXbee1 | Xbee2\r\n------|------\r\nCH: 10 - 19 (or 0x0B to 0x1A in hex) | CH: same as CH for XBee A \r\nID: 0 - 9999 (or up to 0xFFFF in hex) | ID: same as ID for XBee A \r\nDL: 0 - 9999 (or up to 0xFFFF in hex) | DL: must match MY of XBee A\r\nMY: 0 - 9999 (or up to 0xFFFF in hex) | MY: must match DH of XBee A \r\n\r\nFor the DL and MY, it was easy to just set those as the last 4 digits of the MAC addresses associated with each of the Xbees. To see the MAC address of the other XBee, just look at the back of the Xbee and it should be printed on there:\r\n![Xbee Mac Address](lsCoolJ.github.io/XBee-Mac.jpg)\r\n\r\nAs for the Channel and the ID, as long as those meet the criteria above, then that whatever you choose is perfectly fine (they don't have to be D and 5).\r\n\r\nNow you should be able to communicate between the two xbees\r\n\r\n## Ways to communicate between two Xbees\r\n\r\nThere are a few different ways to communicate between the two different xbees. Each way has a little different set up required for it.\r\n\r\n### Communication between two Xbees via the UI\r\n\r\nThe setup for this should be the easiest. The first step is to connect the Xbees either to the same computer or connect the second one to another computer and do the same setup that we already finished for the first xbee using XCTU.\r\n\r\nIn XCTU, click on the **Console** tab and then click on the icon that looks like an unplugged cable. Do this on both computers and you will be able to send data packets between the two xbees.\r\n\r\n### Communication between two Xbees via screen\r\n\r\nYou can also just use screen and never have to take your hands off the keyboard!!! Open up terminal (if you're on a mac) and (if you have screen installed) type something similar to `screen /dev/tty.usbserial-A702YQ5S 9600` into your console. What comes after the usbserial will be different usually so after typing `screen /dev/tty.usb` then just press the tab button and it will auto complete with the port, unless you have more than one usb module plugged in, in which case you will have to select the right one. The 9600 after the port is the baud rate, which should be 9600 on both devices. \r\n\r\nAfter you set up screen on both computers, then this will open up a communication channel between the two XBees (as long as you set up the Channel, ID, Source and Destination correctly). Anything you type on one screen will show up on the other.\r\n\r\n### Communication between two Xbees via python code\r\n\r\nIf you don't like to use the User Interface provided by XCTU and you want more control than what screen can give you, then I suggest communicating using python code. By using a python script, you can start doing stuff with what is given to you from the other XBee.\r\n\r\nHere's the python script that I used. I put the script on both computers (a Mac and a Raspberry Pi with Raspbian) and ran the command `$ python serialComm.py`:\r\n\r\n```Python\r\n# serialComm.py\r\n# imported modules\r\nimport os                   # portable way of using operating system dependent functionality\r\nimport sys                  # provides access to some variables used or maintained by the interpreter\r\nimport time                 # provides various time-related functions\r\nimport fcntl                # performs file control and I/O control on file descriptors\r\nimport serial               # encapsulates the access for the serial port\r\n \r\nserial = serial.Serial()\r\nserial.port = '/dev/tty.usbserial-A702YQ5S'\r\nserial.baudrate = 9600\r\nserial.timeout = 1\r\nserial.writeTimeout = 1\r\nserial.open()\r\n \r\n# make stdin a non-blocking file\r\nfcntl.fcntl(sys.stdin, fcntl.F_SETFL, os.O_NONBLOCK)\r\n \r\n# post startup message to other XBee's and at stdout\r\nserial.writelines(\"RPi #1 is up and running.\\r\\n\")\r\nprint \"RPi #1 is up and running.\"\r\n \r\nprint \"Entering loop to read and print messages (Ctrl-C to abort)...\"\r\n \r\ntry:\r\n    while True:\r\n        line = serial.readline().decode('utf-8')\r\n        if line:\r\n            print line\r\n \r\n        # read data from the keyboard (i.e. stdin) and send via the XBee modem\r\n        try:\r\n            line = sys.stdin.readline()\r\n            serial.write(line)\r\n        except IOError:\r\n            time.sleep(0.1)\r\n            continue\r\n \r\nexcept KeyboardInterrupt:\r\n    print \"*** Ctrl-C keyboard interrupt ***\"\r\n    serial.writelines(\"RPi #1 is going down.\\r\\n\")\r\n```\r\n\r\n***\r\nNow you should be able to type on one device and receive messages on the other. You can play around with the script so you can get different results. Also, you can plug the Xbee into other devices with serial communication such as Arduino boards and Tiva launchpads.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}